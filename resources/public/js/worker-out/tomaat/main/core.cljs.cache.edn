{:rename-macros {}, :renames {}, :externs {process {env {NODE_ENV {}}, platform {}}, __dirname {}}, :use-macros {}, :excludes #{}, :name tomaat.main.core, :imports nil, :requires {nodejs cljs.nodejs, cljs.nodejs cljs.nodejs, electron electron, path path}, :cljs.spec/speced-vars [], :uses {BrowserWindow electron, app electron}, :defs {*main-window {:name tomaat.main.core/*main-window, :file "src/tomaat/main/core.cljs", :line 8, :column 1, :end-line 8, :end-column 22, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 8, :column 10, :end-line 8, :end-column 22}, :tag any}, index-url {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([])), :doc "We want a boss development environment. :asset-path settings\n  jack with live reloading, so this function will help us determine\n  the url of the worker document based on environment"}, :name tomaat.main.core/index-url, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "We want a boss development environment. :asset-path settings\n  jack with live reloading, so this function will help us determine\n  the url of the worker document based on environment"}, create-window {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 22, :column 7, :end-line 22, :end-column 20, :arglists (quote ([]))}, :name tomaat.main.core/create-window, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, quit-app {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 29, :column 7, :end-line 29, :end-column 15, :arglists (quote ([]))}, :name tomaat.main.core/quit-app, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, activate {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([]))}, :name tomaat.main.core/activate, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reload {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([]))}, :name tomaat.main.core/reload, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, -main {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/tomaat/main/core.cljs", :line 42, :column 7, :end-line 42, :end-column 12, :arglists (quote ([]))}, :name tomaat.main.core/-main, :variadic false, :file "src/tomaat/main/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}