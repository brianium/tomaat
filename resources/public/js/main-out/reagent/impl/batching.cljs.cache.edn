{:rename-macros {}, :renames {}, :externs {setTimeout {}, window {}, Error {}}, :use-macros {assert-some reagent.debug, dbg reagent.debug, $! reagent.interop, $ reagent.interop}, :excludes #{flush}, :name reagent.impl.batching, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, reagent.impl.util reagent.impl.util, string clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {is-client reagent.impl.util}, :defs {fake-raf {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 15, :column 7, :end-line 15, :end-column 15, :arglists (quote ([f]))}, :name reagent.impl.batching/fake-raf, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, do-before-flush {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 105, :column 7, :end-line 105, :end-column 22, :arglists (quote ([f]))}, :name reagent.impl.batching/do-before-flush, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, flush-after-render {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 94, :column 7, :end-line 94, :end-column 25, :arglists (quote ([]))}, :name reagent.impl.batching/flush-after-render, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, queue-render {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([c]))}, :name reagent.impl.batching/queue-render, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, next-tick {:name reagent.impl.batching/next-tick, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :line 18, :column 1, :end-line 18, :end-column 15, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 18, :column 6, :end-line 18, :end-column 15}, :tag #{nil any}}, flush {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 91, :column 7, :end-line 91, :end-column 12, :arglists (quote ([]))}, :name reagent.impl.batching/flush, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mark-rendered {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 102, :column 7, :end-line 102, :end-column 20, :arglists (quote ([c]))}, :name reagent.impl.batching/mark-rendered, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, schedule {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 111, :column 7, :end-line 111, :end-column 15, :arglists (quote ([]))}, :name reagent.impl.batching/schedule, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-queue {:name reagent.impl.batching/render-queue, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :line 89, :column 1, :end-line 89, :end-column 22, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 89, :column 10, :end-line 89, :end-column 22}, :tag any}, RenderQueue {:num-fields 1, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/RenderQueue, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 21, :type true, :column 10, :line 45, :record false, :end-line 45, :skip-protocol-flag nil}, compare-mount-order {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 28, :column 7, :end-line 28, :end-column 26, :arglists (quote ([c1 c2]))}, :name reagent.impl.batching/compare-mount-order, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 26, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, mount-count {:name reagent.impl.batching/mount-count, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :line 10, :column 1, :end-line 10, :end-column 21, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 10, :column 10, :end-line 10, :end-column 21}, :tag number}, next-mount-count {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 12, :column 7, :end-line 12, :end-column 23, :arglists (quote ([]))}, :name reagent.impl.batching/next-mount-count, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->RenderQueue {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 45, :column 10, :end-line 45, :end-column 21, :protocols #{reagent.impl.batching/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([scheduled?]))}, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/->RenderQueue, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 21, :method-params ([scheduled?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scheduled?])), :skip-protocol-flag nil}, do-after-render {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 108, :column 7, :end-line 108, :end-column 22, :arglists (quote ([f]))}, :name reagent.impl.batching/do-after-render, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, run-queue {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([a]))}, :name reagent.impl.batching/run-queue, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 16, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, ratom-flush {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/main-out/reagent/impl/batching.cljs", :line 43, :column 10, :end-line 43, :end-column 21}, :name reagent.impl.batching/ratom-flush, :variadic false, :file "resources/public/js/main-out/reagent/impl/batching.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists nil}}, :cljs.spec/registry-ref [], :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{boolean scheduled? :tag :mutable}, :order [scheduled? :tag :mutable boolean]}, :doc nil}