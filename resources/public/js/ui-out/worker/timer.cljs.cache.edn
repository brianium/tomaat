{:rename-macros {}, :renames {}, :externs {setInterval {}, Error {}, clearInterval {}, setTimeout {}}, :use-macros {}, :excludes #{}, :name worker.timer, :imports nil, :requires {worker.util worker.util, worker.slack worker.slack}, :cljs.spec/speced-vars [], :uses {complete-pomodoro worker.slack, web-contents worker.util}, :defs {timer-length {:name worker.timer/timer-length, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 5, :column 1, :end-line 5, :end-column 18, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 5, :column 6, :end-line 5, :end-column 18}, :tag number}, *time {:name worker.timer/*time, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 6, :column 10, :end-line 6, :end-column 15}, :tag any}, *interval {:name worker.timer/*interval, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 7, :column 1, :end-line 7, :end-column 19, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 7, :column 10, :end-line 7, :end-column 19}, :tag any}, tick {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([*time])), :doc "Decrement the current time by one second"}, :name worker.timer/tick, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 11, :method-params ([*time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([*time])), :doc "Decrement the current time by one second"}, minutes-and-seconds {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 14, :column 7, :end-line 14, :end-column 26, :arglists (quote ([time])), :doc "Given the time in seconds returns a minute value and a seconds value\n  as a vector"}, :name worker.timer/minutes-and-seconds, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 26, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :doc "Given the time in seconds returns a minute value and a seconds value\n  as a vector"}, time-changed {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 37, :column 7, :end-line 37, :end-column 19, :arglists (quote ([contents time])), :doc "Monitors changes to time state. Notifies the renderer process when time has changed.\n  When the timer is complete - the interval is cleared and a small timeout is issued\n  before resetting time state"}, :name worker.timer/time-changed, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 19, :method-params ([contents time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([contents time])), :doc "Monitors changes to time state. Notifies the renderer process when time has changed.\n  When the timer is complete - the interval is cleared and a small timeout is issued\n  before resetting time state"}, start {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 49, :column 7, :end-line 49, :end-column 12, :arglists (quote ([event id])), :doc "Starts the timer interval and adds a watch that notifies the renderer process"}, :name worker.timer/start, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 12, :method-params ([event id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event id])), :doc "Starts the timer interval and adds a watch that notifies the renderer process"}, stop {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([] [event id])), :doc "Stops the timer by clearing the interval, resetting the timer, and clearing\n  the watcher notifying the renderer process", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [event id]), :arglists ([] [event id]), :arglists-meta (nil nil)}}, :name worker.timer/stop, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [event id]), :arglists ([] [event id]), :arglists-meta (nil nil)}, :method-params ([] [event id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([] [event id]), :doc "Stops the timer by clearing the interval, resetting the timer, and clearing\n  the watcher notifying the renderer process"}, clear-interval {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([])), :doc "Clears the interval being used to 'tick' the timer"}, :name worker.timer/clear-interval, :variadic false, :file "/Users/brian/projects/tomaat/src/worker/timer.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Clears the interval being used to 'tick' the timer"}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:time-changed}, :order [:time-changed]}, :doc nil}