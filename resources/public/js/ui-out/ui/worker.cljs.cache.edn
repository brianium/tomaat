{:rename-macros {}, :renames {}, :externs {__dirname {}}, :use-macros {}, :excludes #{}, :name ui.worker, :imports nil, :requires {electron electron, path path}, :cljs.spec/speced-vars [], :uses {remote electron, ipcRenderer electron}, :defs {BrowserWindow {:name ui.worker/BrowserWindow, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 5, :column 1, :end-line 5, :end-column 19, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 5, :column 6, :end-line 5, :end-column 19}, :tag any}, *worker {:name ui.worker/*worker, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 8, :column 10, :end-line 8, :end-column 17}, :tag any}, current-window-id {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 10, :column 7, :end-line 10, :end-column 24, :arglists (quote ([]))}, :name ui.worker/current-window-id, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, worker-url {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([])), :doc "We want a boss development environment. :asset-path settings\n  jack with live reloading, so this function will help us determine\n  the url of the worker document based on environment"}, :name ui.worker/worker-url, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "We want a boss development environment. :asset-path settings\n  jack with live reloading, so this function will help us determine\n  the url of the worker document based on environment"}, create-worker {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([on-load & rest])), :doc "Creates a worker and calls the given on-load handler. Returns the\n  created worker.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(on-load rest)], :arglists ([on-load & rest]), :arglists-meta (nil)}}, :name ui.worker/create-worker, :variadic true, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(on-load rest)], :arglists ([on-load & rest]), :arglists-meta (nil)}, :method-params [(on-load rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists ([on-load & rest]), :doc "Creates a worker and calls the given on-load handler. Returns the\n  created worker."}, on {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 37, :column 7, :end-line 37, :end-column 9, :arglists (quote ([event-name handler])), :doc "Handles an ipc renderer event"}, :name ui.worker/on, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 9, :method-params ([event-name handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-name handler])), :doc "Handles an ipc renderer event"}, send {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 42, :column 7, :end-line 42, :end-column 11, :arglists (quote ([worker event-name & rest])), :doc "Send a message to a worker window", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(worker event-name rest)], :arglists ([worker event-name & rest]), :arglists-meta (nil)}}, :name ui.worker/send, :variadic true, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(worker event-name rest)], :arglists ([worker event-name & rest]), :arglists-meta (nil)}, :method-params [(worker event-name rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists ([worker event-name & rest]), :doc "Send a message to a worker window"}, message! {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([event-name & rest])), :doc "Sends a message to the remote worker. This function calls the send function - but\n  it manages the *worker atom - creating it if it does not exist, otherwise reusing it", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(event-name rest)], :arglists ([event-name & rest]), :arglists-meta (nil)}}, :name ui.worker/message!, :variadic true, :file "/Users/brian/projects/tomaat/src/ui/worker.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(event-name rest)], :arglists ([event-name & rest]), :arglists-meta (nil)}, :method-params [(event-name rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([event-name & rest]), :doc "Sends a message to the remote worker. This function calls the send function - but\n  it manages the *worker atom - creating it if it does not exist, otherwise reusing it"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}