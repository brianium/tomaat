{:rename-macros {}, :renames {}, :externs {document {body {}}, console {log {}}, __dirname {}}, :use-macros {}, :excludes #{}, :name ui.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, worker ui.worker, ui.worker ui.worker, ui.timer ui.timer, ui.config ui.config, ui.main ui.main}, :cljs.spec/speced-vars [], :uses {main-screen ui.main, config-screen ui.config, stop-timer ui.timer, start-timer ui.timer}, :defs {*state {:name ui.core/*state, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 10, :column 1, :end-line 10, :end-column 16, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 10, :column 10, :end-line 10, :end-column 16}, :tag any}, toggle-screen {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 15, :column 7, :end-line 15, :end-column 20, :arglists (quote ([e]))}, :name ui.core/toggle-screen, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 20, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, tomaat {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([]))}, :name ui.core/tomaat, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, BrowserWindow {:name ui.core/BrowserWindow, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 9, :column 1, :end-line 9, :end-column 19, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 9, :column 6, :end-line 9, :end-column 19}, :tag any}, start-timer {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 26, :column 7, :end-line 26, :end-column 18, :arglists (quote ([]))}, :name ui.core/start-timer, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, send-start-timer {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 21, :column 7, :end-line 21, :end-column 23, :arglists (quote ([worker id]))}, :name ui.core/send-start-timer, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 23, :method-params ([worker id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([worker id]))}, app {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([]))}, :name ui.core/app, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([]))}, :name ui.core/start, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/src/ui/core.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([]))}, :name ui.core/stop, :variadic false, :file "/Users/brian/projects/tomaat/src/ui/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:time :on-toggle :start :toggle :flipped? :div :started? :stop :div.container :class}, :order [:flipped? :div.container :div :class :toggle :on-toggle :start :time :started? :stop]}, :doc nil}