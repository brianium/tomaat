{:rename-macros {}, :renames {}, :externs {document {}, Error {}, console {}}, :use-macros {log reagent.debug, warn-unless reagent.debug, dbg reagent.debug, $! reagent.interop, prn reagent.debug, warn reagent.debug, dev? reagent.debug, prewalk clojure.walk, println reagent.debug, $ reagent.interop}, :excludes #{}, :name reagent.impl.template, :imports nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, ratom reagent.ratom, string clojure.string, batch reagent.impl.batching, reagent.debug reagent.debug, clojure.string clojure.string, clojure.walk clojure.walk}, :cljs.spec/speced-vars [], :uses {prewalk clojure.walk, is-client reagent.impl.util}, :defs {valid-tag? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 30, :column 16, :end-line 30, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name reagent.impl.template/valid-tag?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :ret-tag boolean, :end-line 30, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, adapt-react-class {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 256, :column 7, :end-line 256, :end-column 24, :arglists (quote ([c]))}, :name reagent.impl.template/adapt-react-class, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, has-selection-api? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 110, :column 16, :end-line 110, :end-column 34, :tag boolean, :arglists (quote ([input-type]))}, :name reagent.impl.template/has-selection-api?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 34, :method-params ([input-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :ret-tag boolean, :end-line 110, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([input-type]))}, str-coll {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 287, :column 7, :end-line 287, :end-column 15, :arglists (quote ([coll]))}, :name reagent.impl.template/str-coll, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, get-key {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 240, :column 7, :end-line 240, :end-column 14, :arglists (quote ([x]))}, :name reagent.impl.template/get-key, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, re-tag {:name reagent.impl.template/re-tag, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 13, :column 1, :end-line 15, :end-column 9, :doc "Regular expression that parses a CSS-style id and class\n             from a tag name.", :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 15, :column 3, :end-line 15, :end-column 9, :doc "Regular expression that parses a CSS-style id and class\n             from a tag name."}, :tag any}, reag-element {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 249, :column 7, :end-line 249, :end-column 19, :arglists (quote ([tag v]))}, :name reagent.impl.template/reag-element, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 19, :method-params ([tag v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag v]))}, as-element {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 327, :column 7, :end-line 327, :end-column 17, :arglists (quote ([x]))}, :name reagent.impl.template/as-element, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, input-component? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 197, :column 16, :end-line 197, :end-column 32, :tag boolean, :arglists (quote ([x]))}, :name reagent.impl.template/input-component?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 32, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :ret-tag boolean, :end-line 197, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, NativeWrapper {:num-fields 0, :protocols #{}, :name reagent.impl.template/NativeWrapper, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 23, :type true, :column 10, :line 17, :record false, :end-line 17, :skip-protocol-flag nil}, ->NativeWrapper {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 17, :column 10, :end-line 17, :end-column 23, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{}, :name reagent.impl.template/->NativeWrapper, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, input-render-setup {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 173, :column 7, :end-line 173, :end-column 25, :arglists (quote ([this jsprops]))}, :name reagent.impl.template/input-render-setup, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 25, :method-params ([this jsprops]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this jsprops]))}, oset {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 73, :column 7, :end-line 73, :end-column 11, :arglists (quote ([o k v]))}, :name reagent.impl.template/oset, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 11, :method-params ([o k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([o k v]))}, oget {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 77, :column 7, :end-line 77, :end-column 11, :arglists (quote ([o k]))}, :name reagent.impl.template/oget, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 11, :method-params ([o k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o k]))}, hiccup-tag? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 26, :column 16, :end-line 26, :end-column 27, :tag boolean, :arglists (quote ([x]))}, :name reagent.impl.template/hiccup-tag?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :ret-tag boolean, :end-line 26, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, set-id-class {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([p id-class]))}, :name reagent.impl.template/set-id-class, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 19, :method-params ([p id-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p id-class]))}, tag-name-cache {:name reagent.impl.template/tag-name-cache, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 262, :column 1, :end-line 262, :end-column 20, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 262, :column 6, :end-line 262, :end-column 20}, :tag object}, prop-name-cache {:name reagent.impl.template/prop-name-cache, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 38, :column 1, :end-line 38, :end-column 21, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 38, :column 6, :end-line 38, :end-column 21}, :tag object}, convert-props {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 93, :column 7, :end-line 93, :end-column 20, :arglists (quote ([props id-class]))}, :name reagent.impl.template/convert-props, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 20, :method-params ([props id-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props id-class]))}, hiccup-err {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 296, :column 7, :end-line 296, :end-column 17, :arglists (quote ([v & msg])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(v msg)], :arglists ([v & msg]), :arglists-meta (nil)}}, :name reagent.impl.template/hiccup-err, :variadic true, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(v msg)], :arglists ([v & msg]), :arglists-meta (nil)}, :method-params [(v msg)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists ([v & msg])}, named? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 22, :column 16, :end-line 22, :end-column 22, :tag boolean, :arglists (quote ([x]))}, :name reagent.impl.template/named?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :ret-tag boolean, :end-line 22, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, parse-tag {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 224, :column 7, :end-line 224, :end-column 16, :arglists (quote ([hiccup-tag]))}, :name reagent.impl.template/parse-tag, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 16, :method-params ([hiccup-tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hiccup-tag]))}, kv-conv {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 59, :column 7, :end-line 59, :end-column 14, :arglists (quote ([o k v]))}, :name reagent.impl.template/kv-conv, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 14, :method-params ([o k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([o k v]))}, key-from-vec {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 244, :column 7, :end-line 244, :end-column 19, :arglists (quote ([v]))}, :name reagent.impl.template/key-from-vec, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 19, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, js-val? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 54, :column 16, :end-line 54, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name reagent.impl.template/js-val?, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, input-unmount {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 194, :column 7, :end-line 194, :end-column 20, :arglists (quote ([this]))}, :name reagent.impl.template/input-unmount, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, reagent-input-class {:name reagent.impl.template/reagent-input-class, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 202, :column 1, :end-line 202, :end-column 25, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 202, :column 6, :end-line 202, :end-column 25}, :tag clj-nil}, native-element {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 271, :column 7, :end-line 271, :end-column 21, :arglists (quote ([parsed argv first]))}, :name reagent.impl.template/native-element, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 21, :method-params ([parsed argv first]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parsed argv first]))}, reagent-input {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 216, :column 7, :end-line 216, :end-column 20, :arglists (quote ([]))}, :name reagent.impl.template/reagent-input, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, vec-to-elem {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 299, :column 7, :end-line 299, :end-column 18, :arglists (quote ([v]))}, :name reagent.impl.template/vec-to-elem, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, cache-get {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 42, :column 7, :end-line 42, :end-column 16, :arglists (quote ([o k]))}, :name reagent.impl.template/cache-get, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 16, :method-params ([o k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o k]))}, input-handle-change {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 164, :column 7, :end-line 164, :end-column 26, :arglists (quote ([this on-change e]))}, :name reagent.impl.template/input-handle-change, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 26, :method-params ([this on-change e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this on-change e]))}, input-set-value {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 114, :column 7, :end-line 114, :end-column 22, :arglists (quote ([this]))}, :name reagent.impl.template/input-set-value, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, make-element {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 392, :column 7, :end-line 392, :end-column 19, :arglists (quote ([argv comp jsprops first-child]))}, :name reagent.impl.template/make-element, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 19, :method-params ([argv comp jsprops first-child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 4, :fn-var true, :arglists (quote ([argv comp jsprops first-child]))}, input-spec {:name reagent.impl.template/input-spec, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 206, :column 1, :end-line 206, :end-column 16, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 206, :column 6, :end-line 206, :end-column 16}, :tag cljs.core/IMap}, expand-seq-dev {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 345, :column 7, :end-line 345, :end-column 21, :arglists (quote ([s o]))}, :name reagent.impl.template/expand-seq-dev, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 21, :method-params ([s o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s o]))}, convert-prop-value {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 64, :column 7, :end-line 64, :end-column 25, :arglists (quote ([x]))}, :name reagent.impl.template/convert-prop-value, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, cached-prop-name {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 46, :column 7, :end-line 46, :end-column 23, :arglists (quote ([k]))}, :name reagent.impl.template/cached-prop-name, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 23, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, these-inputs-have-selection-api {:name reagent.impl.template/these-inputs-have-selection-api, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 107, :column 1, :end-line 107, :end-column 37, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 107, :column 6, :end-line 107, :end-column 37}, :tag cljs.core/ISet}, expand-seq {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 339, :column 7, :end-line 339, :end-column 17, :arglists (quote ([s]))}, :name reagent.impl.template/expand-seq, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, expand-seq-check {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 355, :column 7, :end-line 355, :end-column 23, :arglists (quote ([x]))}, :name reagent.impl.template/expand-seq-check, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, find-dom-node {:name reagent.impl.template/find-dom-node, :file ".cljs_node_repl/reagent/impl/template.cljs", :line 102, :column 1, :end-line 102, :end-column 23, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 102, :column 10, :end-line 102, :end-column 23}, :tag clj-nil}, cached-parse {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 264, :column 7, :end-line 264, :end-column 19, :arglists (quote ([x]))}, :name reagent.impl.template/cached-parse, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, try-get-key {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/template.cljs", :line 234, :column 7, :end-line 234, :end-column 18, :arglists (quote ([x]))}, :name reagent.impl.template/try-get-key, :variadic false, :file ".cljs_node_repl/reagent/impl/template.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :cljs.spec/registry-ref [], :require-macros {ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{:key :else :component-did-update :reagent-render :component-will-unmount :display-name}, :order [:else :display-name :component-did-update :component-will-unmount :reagent-render :key]}, :doc nil}