{:rename-macros {}, :renames {}, :externs {encodeURIComponent {}, decodeURIComponent {}, Math {pow {}}, Error {}, isNaN {}, parseInt {}, parseFloat {}}, :use-macros {join clojure.string, replace clojure.string, upper-case clojure.string, split clojure.string, blank? clojure.string}, :excludes #{replace read-string}, :name no.en.core, :imports nil, :requires {clojure.string clojure.string, cljs.reader cljs.reader, base64 goog.crypt.base64, goog.crypt.base64 goog.crypt.base64}, :cljs.spec/speced-vars [], :uses {join clojure.string, replace clojure.string, upper-case clojure.string, read-string cljs.reader, split clojure.string, blank? clojure.string}, :defs {byte-scale {:name no.en.core/byte-scale, :file "resources/public/js/ui-out/no/en/core.cljc", :line 87, :column 1, :end-line 87, :end-column 16, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 87, :column 6, :end-line 87, :end-column 16}, :tag cljs.core/IMap}, url-decode {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 76, :column 7, :end-line 76, :end-column 17, :arglists (quote ([s & [encoding]])), :doc "Returns `s` as an URL decoded string.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}}, :name no.en.core/url-decode, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}, :method-params [(s [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists ([s & [encoding]]), :doc "Returns `s` as an URL decoded string."}, parse-query-params {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 201, :column 7, :end-line 201, :end-column 25, :arglists (quote ([s])), :doc "Parse the query parameter string `s` and return a map."}, :name no.en.core/parse-query-params, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse the query parameter string `s` and return a map."}, separator {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 195, :column 7, :end-line 195, :end-column 16, :arglists (quote ([s])), :doc "Returns the first string that separates the components in `s`."}, :name no.en.core/separator, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns the first string that separates the components in `s`."}, format-url {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 158, :column 7, :end-line 158, :end-column 17, :arglists (quote ([m])), :doc "Format the Ring map as an url."}, :name no.en.core/format-url, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Format the Ring map as an url."}, split-by-regex {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([s pattern])), :doc "Split the string `s` by the regex `pattern`."}, :name no.en.core/split-by-regex, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 21, :method-params ([s pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s pattern])), :doc "Split the string `s` by the regex `pattern`."}, compact-map {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, :name no.en.core/compact-map, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, apply-unit {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 98, :column 8, :end-line 98, :end-column 18, :private true, :arglists (quote ([number unit]))}, :private true, :name no.en.core/apply-unit, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([number unit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([number unit]))}, with-retries {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 248, :column 11, :end-line 248, :end-column 23, :macro true, :arglists (quote ([n & body])), :doc "Executes body. If an exception is thrown, will retry. At most n retries\n  are done. If still some exception is thrown it is bubbled upwards in\n  the call chain.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env n body)], :arglists ([&form &env n & body]), :arglists-meta (nil)}}, :name no.en.core/with-retries, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env n body)], :arglists ([&form &env n & body]), :arglists-meta (nil)}, :method-params [(&form &env n body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 248, :macro true, :end-line 248, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env n & body]), :doc "Executes body. If an exception is thrown, will retry. At most n retries\n  are done. If still some exception is thrown it is bubbled upwards in\n  the call chain."}, split-by-comma {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 28, :column 7, :end-line 28, :end-column 21, :arglists (quote ([s])), :doc "Split the string `s` by comma."}, :name no.en.core/split-by-comma, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Split the string `s` by comma."}, url-regex {:name no.en.core/url-regex, :file "resources/public/js/ui-out/no/en/core.cljc", :line 19, :column 1, :end-line 19, :end-column 15, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 19, :column 6, :end-line 19, :end-column 15}, :tag any}, deep-merge {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 274, :column 7, :end-line 274, :end-column 17, :arglists (quote ([& maps])), :doc "Like merge, but merges maps recursively.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name no.en.core/deep-merge, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like merge, but merges maps recursively."}, utf8-string {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 32, :column 7, :end-line 32, :end-column 18, :arglists (quote ([bytes])), :doc "Returns `bytes` as an UTF-8 encoded string."}, :name no.en.core/utf8-string, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([bytes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bytes])), :doc "Returns `bytes` as an UTF-8 encoded string."}, parse-integer {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 126, :column 7, :end-line 126, :end-column 20, :arglists (quote ([s])), :doc "Parse `s` as a integer number."}, :name no.en.core/parse-integer, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as a integer number."}, port-number {:name no.en.core/port-number, :file "resources/public/js/ui-out/no/en/core.cljc", :line 10, :column 1, :end-line 10, :end-column 17, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 10, :column 6, :end-line 10, :end-column 17}, :tag cljs.core/IMap}, parse-float {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 141, :column 7, :end-line 141, :end-column 18, :arglists (quote ([s])), :doc "Parse `s` as a float number."}, :name no.en.core/parse-float, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as a float number."}, format-query-params {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 146, :column 7, :end-line 146, :end-column 26, :arglists (quote ([m])), :doc "Format the map `m` into a query parameter string."}, :name no.en.core/format-query-params, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 26, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Format the map `m` into a query parameter string."}, pow {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 83, :column 7, :end-line 83, :end-column 10, :arglists (quote ([n x]))}, :name no.en.core/pow, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 10, :method-params ([n x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n x]))}, parse-double {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 136, :column 7, :end-line 136, :end-column 19, :arglists (quote ([s])), :doc "Parse `s` as a double number."}, :name no.en.core/parse-double, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as a double number."}, map-keys {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 264, :column 7, :end-line 264, :end-column 15, :arglists (quote ([f coll])), :doc "Maps a function over the keys of an associative collection."}, :name no.en.core/map-keys, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Maps a function over the keys of an associative collection."}, editable? {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 255, :column 8, :end-line 255, :end-column 17, :private true, :arglists (quote ([coll]))}, :private true, :name no.en.core/editable?, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, public-url {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 180, :column 7, :end-line 180, :end-column 17, :arglists (quote ([url])), :doc "Return the formatted `url` without password as a string."}, :name no.en.core/public-url, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Return the formatted `url` without password as a string."}, url-encode {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([s & [encoding]])), :doc "Returns `s` as an URL encoded string.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}}, :name no.en.core/url-encode, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}, :method-params [(s [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([s & [encoding]]), :doc "Returns `s` as an URL encoded string."}, parse-url {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 211, :column 7, :end-line 211, :end-column 16, :arglists (quote ([s])), :doc "Parse the url `s` and return a Ring compatible map."}, :name no.en.core/parse-url, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse the url `s` and return a Ring compatible map."}, deep-merge-with {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 281, :column 7, :end-line 281, :end-column 22, :arglists (quote ([f & maps])), :doc "Like merge-with, but merges maps recursively, applying the given fn\n  only when there's a non-map at a particular level.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}}, :name no.en.core/deep-merge-with, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}, :method-params [(f maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists ([f & maps]), :doc "Like merge-with, but merges maps recursively, applying the given fn\n  only when there's a non-map at a particular level."}, parse-percent {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 185, :column 7, :end-line 185, :end-column 20, :arglists (quote ([s])), :doc "Parse `s` as a percentage."}, :name no.en.core/parse-percent, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as a percentage."}, parse-bytes {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 119, :column 7, :end-line 119, :end-column 18, :arglists (quote ([s]))}, :name no.en.core/parse-bytes, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, reduce-map {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 259, :column 8, :end-line 259, :end-column 18, :private true, :arglists (quote ([f coll]))}, :private true, :name no.en.core/reduce-map, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 18, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll]))}, base64-decode {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([s])), :doc "Returns `s` as a Base64 decoded string."}, :name no.en.core/base64-decode, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns `s` as a Base64 decoded string."}, map-vals {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 269, :column 7, :end-line 269, :end-column 15, :arglists (quote ([f coll])), :doc "Maps a function over the values of an associative collection."}, :name no.en.core/map-vals, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Maps a function over the values of an associative collection."}, with-retries* {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 233, :column 7, :end-line 233, :end-column 20, :arglists (quote ([n thunk])), :doc "Executes thunk. If an exception is thrown, will retry. At most n retries\n  are done. If still some exception is thrown it is bubbled upwards in\n  the call chain."}, :name no.en.core/with-retries*, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([n thunk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n thunk])), :doc "Executes thunk. If an exception is thrown, will retry. At most n retries\n  are done. If still some exception is thrown it is bubbled upwards in\n  the call chain."}, base64-encode {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 38, :column 7, :end-line 38, :end-column 20, :arglists (quote ([bytes])), :doc "Returns `s` as a Base64 encoded string."}, :name no.en.core/base64-encode, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([bytes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bytes])), :doc "Returns `s` as a Base64 encoded string."}, prog1 {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 227, :column 11, :end-line 227, :end-column 16, :macro true, :arglists (quote ([& body])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name no.en.core/prog1, :variadic true, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 227, :macro true, :end-line 227, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body])}, parse-long {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 131, :column 7, :end-line 131, :end-column 17, :arglists (quote ([s])), :doc "Parse `s` as a long number."}, :name no.en.core/parse-long, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as a long number."}, parse-number {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 106, :column 8, :end-line 106, :end-column 20, :private true, :arglists (quote ([s parse-fn]))}, :private true, :name no.en.core/parse-number, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([s parse-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s parse-fn]))}, pattern-quote {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/resources/public/js/ui-out/no/en/core.cljc", :line 190, :column 7, :end-line 190, :end-column 20, :arglists (quote ([s])), :doc "Quote the special characters in `s` that are used in regular expressions."}, :name no.en.core/pattern-quote, :variadic false, :file "resources/public/js/ui-out/no/en/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Quote the special characters in `s` that are used in regular expressions."}}, :cljs.spec/registry-ref [], :require-macros {cljs.reader cljs.reader}, :cljs.analyzer/constants {:seen #{:postgresql :else result__49366__auto__ :password :zookeeper :fragment :username :server-port cljs.core/let :amqp cljs.core/fn :query-params no.en.core/with-retries* :http :uri :server-name :query-string :rabbitmq :scheme :mysql :https}, :order [:amqp :http :https :mysql :postgresql :rabbitmq :zookeeper :query-params :scheme :username :password :server-name :server-port :uri :fragment :query-string cljs.core/let result__49366__auto__ :else no.en.core/with-retries* cljs.core/fn]}, :doc nil}