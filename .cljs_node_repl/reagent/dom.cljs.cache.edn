{:rename-macros {}, :renames {}, :externs {ReactDOM {}, require {}, Error {}}, :use-macros {dbg reagent.debug, $! reagent.interop, $ reagent.interop}, :excludes #{}, :name reagent.dom, :imports nil, :requires {reagent.impl.util reagent.impl.util, reagent.interop reagent.interop, reagent.ratom reagent.ratom, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, cljsjs.react.dom cljsjs.react.dom, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, batch reagent.impl.batching, reagent.debug reagent.debug}, :cljs.spec/speced-vars [], :uses nil, :defs {re-render-component {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 38, :column 8, :end-line 38, :end-column 27, :private true, :arglists (quote ([comp container]))}, :private true, :name reagent.dom/re-render-component, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 27, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container]))}, force-update-all {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 66, :column 7, :end-line 66, :end-column 23, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."}, :name reagent.dom/force-update-all, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."}, render-comp {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 28, :column 8, :end-line 28, :end-column 19, :private true, :arglists (quote ([comp container callback]))}, :private true, :name reagent.dom/render-comp, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 19, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback]))}, imported {:name reagent.dom/imported, :file ".cljs_node_repl/reagent/dom.cljs", :line 10, :column 1, :end-line 10, :end-column 28, :private true, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 10, :column 20, :end-line 10, :end-column 28, :private true}, :tag clj-nil}, unmount-component-at-node {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 56, :column 7, :end-line 56, :end-column 32, :arglists (quote ([container]))}, :name reagent.dom/unmount-component-at-node, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, unmount-comp {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 24, :column 8, :end-line 24, :end-column 20, :private true, :arglists (quote ([container]))}, :private true, :name reagent.dom/unmount-comp, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 20, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, roots {:name reagent.dom/roots, :file ".cljs_node_repl/reagent/dom.cljs", :line 22, :column 1, :end-line 22, :end-column 25, :private true, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 22, :column 20, :end-line 22, :end-column 25, :private true}, :tag any}, module {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([]))}, :name reagent.dom/module, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dom-node {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 59, :column 7, :end-line 59, :end-column 15, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, :name reagent.dom/dom-node, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, render {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/dom.cljs", :line 41, :column 7, :end-line 41, :end-column 13, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}}, :name reagent.dom/render, :variadic false, :file ".cljs_node_repl/reagent/dom.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists ([comp container] [comp container callback]), :doc "Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."}}, :cljs.spec/registry-ref [], :require-macros {ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}