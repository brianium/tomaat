{:rename-macros {}, :renames {}, :externs {React {}, require {}, Error {}, createReactClass {}, window {}}, :use-macros {log reagent.debug, dbg reagent.debug, $! reagent.interop, warn reagent.debug, $ reagent.interop}, :excludes #{}, :name reagent.impl.util, :imports nil, :requires {cljsjs.react cljsjs.react, cljsjs.create-react-class cljsjs.create-react-class, reagent.debug reagent.debug, reagent.interop reagent.interop, string clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {->PartialFn {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 68, :column 10, :end-line 68, :end-column 19, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Fn}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :factory :positional, :arglists (quote ([pfn f args]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Fn}, :name reagent.impl.util/->PartialFn, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 19, :method-params ([pfn f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pfn f args])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, merge-props {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 140, :column 7, :end-line 140, :end-column 18, :arglists (quote ([p1 p2]))}, :name reagent.impl.util/merge-props, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 18, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, capitalize {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 41, :column 7, :end-line 41, :end-column 17, :arglists (quote ([s]))}, :name reagent.impl.util/capitalize, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, react {:name reagent.impl.util/react, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 8, :column 1, :end-line 8, :end-column 15, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 8, :column 10, :end-line 8, :end-column 15}, :tag js}, PartialFn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Fn}, :name reagent.impl.util/PartialFn, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 19, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, dash-to-camel {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 46, :column 7, :end-line 46, :end-column 20, :arglists (quote ([dashed]))}, :name reagent.impl.util/dash-to-camel, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 20, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed]))}, dont-camel-case {:name reagent.impl.util/dont-camel-case, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 39, :column 1, :end-line 39, :end-column 21, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 39, :column 6, :end-line 39, :end-column 21}, :tag cljs.core/ISet}, merge-style {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 132, :column 8, :end-line 132, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-style, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, memoize-1 {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.util/memoize-1, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, make-partial-fn {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 121, :column 7, :end-line 121, :end-column 22, :arglists (quote ([f args]))}, :name reagent.impl.util/make-partial-fn, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 22, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f args]))}, *non-reactive* {:name reagent.impl.util/*non-reactive*, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 23, :column 1, :end-line 23, :end-column 39, :tag boolean, :dynamic true, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 23, :column 25, :end-line 23, :end-column 39, :tag boolean, :dynamic true}}, fun-name {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([f]))}, :name reagent.impl.util/fun-name, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, merge-class {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 124, :column 8, :end-line 124, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-class, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, is-client {:name reagent.impl.util/is-client, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 20, :column 1, :end-line 20, :end-column 15, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 20, :column 6, :end-line 20, :end-column 15}, :tag boolean}, force-update {:protocol-inline nil, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 151, :column 7, :end-line 151, :end-column 19, :arglists (quote ([comp deep]))}, :name reagent.impl.util/force-update, :variadic false, :file ".cljs_node_repl/reagent/impl/util.cljs", :end-column 19, :method-params ([comp deep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp deep]))}, *always-update* {:name reagent.impl.util/*always-update*, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 149, :column 1, :end-line 149, :end-column 31, :dynamic true, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 149, :column 16, :end-line 149, :end-column 31, :dynamic true}, :tag boolean}, create-class {:name reagent.impl.util/create-class, :file ".cljs_node_repl/reagent/impl/util.cljs", :line 14, :column 1, :end-line 14, :end-column 22, :meta {:file "/Users/brian/projects/tomaat/.cljs_node_repl/reagent/impl/util.cljs", :line 14, :column 10, :end-line 14, :end-column 22}, :tag js}}, :cljs.spec/registry-ref [], :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:else args :name :style pfn :class f}, :order [:else :name pfn f args :class :style]}, :doc nil}